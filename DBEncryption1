Let’s break this down. The validateClientOnboarding method implements a polling mechanism to check for a database entry, retrying the query for up to 30 seconds with a 2-second interval between attempts. We’ll apply similar logic to the validateClientEncryption method and then explain the approach.Step 1: Implement Similar Logic in validateClientEncryptionHere’s the modified validateClientEncryption method with the same polling logic as in validateClientOnboarding:




public void validateClientEncryption(String clientId, List<String> keyType) throws SQLException {
    String respClientId = "";
    String respKeyType = "";
    try (Connection conn = PdmDbDsManager.getInstance().getDataSource(rdrConfig).getConnection()) {
        PreparedStatement ps = conn.prepareStatement(SELECT_CLNT_ENCRYPT_DTL_SQL);
        ps.setString(parameterIndex: 1, clientId);
        // Wait for record
        ResultSet resultSet = ps.executeQuery();
        // Using Awaitility for 1 sec polling at most 30 seconds
        long startTime = System.currentTimeMillis();
        long maxWaitTime = 30000; // 30 seconds max wait time
        long waitInterval = 2000; // Wait 2 seconds between retries
        while (!resultSet.next()) {
            // Check if we've exceeded the maximum wait time
            if (System.currentTimeMillis() - startTime > maxWaitTime) {
                throw new SQLException("TIMEOUT: Entry not found in database after waiting for " + maxWaitTime + "ms");
            }
            // Wait for a short interval before retry
            Thread.sleep(millis: waitInterval);
            resultSet = ps.executeQuery(); // Retry the query
        }
        // If we reach here, the data is found
        respClientId = resultSet.getString(columnLabel: "CLNT_ID");
        AonAssert.assertEquals(respClientId, clientId,
                message: "Validating Encryption Details for the onboarded clientId in the " +
                        "Client Encryption Details table");
        respKeyType = resultSet.getString(columnLabel: "KEY_TYPE");
        AonAssert.assertTrue(keyType.contains(respKeyType),
                message: "Validating Key Status in the 'Client Encryption Details'");
        Logger.info("Expected Encryption key types: {} found for clientId: {} in the 'Client Encryption Details' table",
                keyType, clientId);
    } catch (InterruptedException e) {
        throw new RuntimeException(e);
    }
}



Step 2: Explanation of the LogicLet’s break down the logic implemented in both methods:Polling Mechanism for Database Entry CheckPurpose: The goal is to repeatedly check the database for a specific entry (a record matching the clientId) until it’s found or a timeout occurs. This is useful in scenarios where the database might not be immediately updated due to asynchronous processes or delays.Steps:Prepare the Query:A PreparedStatement is created to query the database with SELECT_CLNT_ENCRYPT_DTL_SQL (or SELECT_CLNT_DTL_SQL in the onboarding method), selecting data for the given clientId.Execute the Query:The query is executed, and a ResultSet is obtained.Polling Loop:A while loop checks if the ResultSet has any data (resultSet.next() returns false if no data is found).If no data is found, the loop checks if the maximum wait time (maxWaitTime = 30,000ms or 30 seconds) has been exceeded since the start time (startTime).If the timeout is reached, a SQLException is thrown with a message indicating the timeout.If not timed out, the thread sleeps for a short interval (waitInterval = 2,000ms or 2 seconds) using Thread.sleep(), then re-executes the query to check again.Data Found:Once data is found (resultSet.next() returns true), the loop exits, and the method proceeds to extract and validate the data.Validation:The respClientId is compared with the input clientId using AonAssert.assertEquals to ensure they match.The respKeyType (or respClientStatus in validateClientOnboarding) is validated against expected values using AonAssert.assertTrue.Logging:A log message is written to confirm the successful validation.Error HandlingSQLException: Thrown if the database query fails or if the timeout is reached.InterruptedException: Caught if the Thread.sleep() is interrupted, and rethrown as a RuntimeException.Why Polling?Polling is used here because the database entry might not be immediately available due to delays in data processing or replication. Instead of failing immediately, the method retries for up to 30 seconds, giving the database time to update.Key Differences Between the MethodsThe validateClientOnboarding method checks for a client’s onboarding status (CLNT_STAT), while validateClientEncryption checks for encryption key types (KEY_TYPE).The SQL queries (SELECT_CLNT_DTL_SQL vs. SELECT_CLNT_ENCRYPT_DTL_SQL) and the validation assertions differ based on the data being checked, but the polling logic is now identical.Awaitility MentionThe comment mentions "using Awaitility for 1 sec polling at most 30 seconds," but the actual implementation uses Thread.sleep() with a 2-second interval. Awaitility is a library that simplifies polling in tests, but it’s not used here. The current implementation achieves the same goal manually.SummaryThe updated validateClientEncryption method now mirrors the polling logic of validateClientOnboarding, retrying the database query every 2 seconds for up to 30 seconds. This ensures the method waits for the database entry to appear before proceeding with validation, handling potential delays gracefully.